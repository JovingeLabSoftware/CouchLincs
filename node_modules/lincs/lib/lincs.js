var Q = require('q');

var LINCS = function () {
	var _couchbase = require('couchbase');
	var _cluster = new _couchbase.Cluster('couchbase://127.0.0.1');
	var _bucket = _cluster.openBucket('LINCS1');
	var _view = _couchbase.ViewQuery;

   // no reason to do this now, but preparing for more logic 
   // and enforecement on accessors in the future.
   this.cluster = _cluster;
   this.bucket = _bucket;
   this.view = _view;
};

LINCS.prototype.getGoldByCell = function(name, skip, limit, cb) {
	var deferred = Q.defer();
    var query = this.view.from('lincs', 'gold_by_cell').reduce(false).skip(skip).limit(limit);

	this.bucket.query(query, function(err, results) { 
  		if(err) {
  			deferred.reject(err);
  		} else {
	  		deferred.resolve(results);
  		}
  	});

  	deferred.promise.nodeify(cb);
  	return deferred.promise;
};

LINCS.prototype.getVehicle = function(key, cb) {
	var deferred = Q.defer();
  	this.bucket.get(key, function(err, doc) {
  		if(err) {
  			deferred.reject(err);
  		} else {
	  		deferred.resolve(doc.value.metadata.pert_vehicle);
  		}
  	});
  	deferred.promise.nodeify(cb);
  	return deferred.promise;
};

LINCS.prototype.getGoldByPert = function(name, dose, time, cell, skip, limit, cb) {
	var deferred = Q.defer();
    var start = [cell, name, dose, time];
    var end = [cell, name, dose, time];
    var query = this.view.from('lincs', 'gold_by_cell')
    	.reduce(false)
    	.skip(skip)
    	.limit(limit)
    	.range(start, end);

	this.bucket.query(query, function(err, results) { 
  		if(err) {
  			deferred.reject(err);
  		} else {
	  		deferred.resolve(results);
  		}
  	});

  	deferred.promise.nodeify(cb);
  	return deferred.promise;
};

module.exports = exports = new LINCS();
