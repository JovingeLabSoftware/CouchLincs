library(slinky)
library(testthat)
test_file("tests//testthat/test.R")
library(slinky)
source('/mnt/lincs/CouchLincs/slinky/R/slinky.R')
source('/mnt/lincs/CouchLincs/slinky/R/slinky.R')
source('/mnt/lincs/CouchLincs/slinky/R/slinky.R')
library(slinky)
sl <- slinky$new()
sl <- Slinky$new()
sl <- Slinky$new(loglevel='all')
sl$loadAll2()
source('/mnt/lincs/CouchLincs/slinky/R/slinky.R')
library(slinky)
source('/mnt/lincs/CouchLincs/slinky/R/slinky.R')
library(slinky)
source('/mnt/lincs/CouchLincs/slinky/R/slinky.R')
library(slinky)
metadata[1,]
toJSON(list(md= metadata[1,]))
source('/mnt/lincs/CouchLincs/slinky/R/slinky.R')
library(slinky)
sl <- Slinky$new()
sl$loadLevel2(1)
sl$loadLevel2(col=1)
??request
rr <- GET("http://yahoo.com")
str(rr)
rr$request
source('/mnt/lincs/CouchLincs/slinky/R/slinky.R')
library(slinky)
sl$loadLevel2(col=1)
sl <- Slinky$new()
sl$loadLevel2(col=1)
source('/mnt/lincs/CouchLincs/slinky/R/slinky.R')
sl$loadLevel2(col=1)
source('/mnt/lincs/CouchLincs/slinky/R/slinky.R')
library(slinky)
sl <- Slinky$new()
sl$loadLevel2(col=1)
sl$loadLevel2(col=1)
library(slinky)
rm(list=ls())
exit
q()
library(slinky)
sl <- Slinky$new()
res <- sl$loadLevel2(col=1)
res <- sl$loadLevel2(col=1)
url <- "http://52.26.169.30:8093/query/service"
statement <- "CREATE PRIMARY INDEX ON LINCS1"
# will fail silently if already exists...
res <- POST(url, query=list(statement=statement))
url <- "http://52.26.169.30:8092/query/service"
statement <- "CREATE PRIMARY INDEX ON LINCS1"
# will fail silently if already exists...
res <- POST(url, query=list(statement=statement))
content(res)
url <- "http://52.26.169.30:8093/query/service"
statement <- "CREATE PRIMARY INDEX ON LINCS1"
# will fail silently if already exists...
res <- POST(url, query=list(statement=statement))
content(res)
res <- sl$loadLevel2(col=1)
res <- sl$loadLevel2(col=1)
res <- sl$loadLevel2(col=1)
res <- sl$loadLevel2(col=1)
res <- sl$loadLevel2(col=1)
res <- sl$loadLevel2(col=1)
res <- sl$loadLevel2(col=1)
res <- sl$loadLevel2(col=1)
res <- sl$loadLevel2(col=1)
res <- sl$loadLevel2(col=1)
res <- sl$loadLevel2(col=1)
res <- sl$loadLevel2(col=1)
res <- sl$loadLevel2(col=1)
res <- sl$loadLevel2(col=1)
res <- sl$loadLevel2(col=1)
res <- sl$loadLevel2(col=1)
res <- sl$loadLevel2(col=1)
res <- sl$loadLevel2(col=1)
res <- sl$loadLevel2(col=1)
url <- paste("http://52.35.41.246:8091/query/service", sep="")
statement <- "CREATE PRIMARY INDEX ON LINCS1"
# will fail silently if already exists...
res <- POST(url, query=list(statement=statement))
content(res)
url <- paste("http://52.35.41.246:8092/query/service", sep="")
statement <- "CREATE PRIMARY INDEX ON LINCS1"
# will fail silently if already exists...
res <- POST(url, query=list(statement=statement))
content(res)
statement <- "CREATE PRIMARY INDEX ON LINCS"
statement <- "CREATE PRIMARY INDEX ON LINCS1"
# will fail silently if already exists...
res <- POST(url, query=list(statement=statement))
content(res)
url <- paste("http://52.35.41.246:8091/query/service", sep="")
statement <- "CREATE PRIMARY INDEX ON LINCS"
# will fail silently if already exists...
res <- POST(url, query=list(statement=statement))
content(res)
url <- paste("http://52.35.41.246:8091/query/service", sep="")
url <- paste("http://52.35.41.246:8092/query/service", sep="")
statement <- "CREATE PRIMARY INDEX ON LINCS"
# will fail silently if already exists...
res <- POST(url, query=list(statement=statement))
content(res)
url <- paste("http://52.35.41.246:8093/query/service", sep="")
statement <- "CREATE PRIMARY INDEX ON LINCS"
# will fail silently if already exists...
res <- POST(url, query=list(statement=statement))
data("metadata")
str(metadata)
metadata['pert_id', 1]
metadata[1, 'pert_id']
metadata[2, 'pert_id']
nrow(metadata)
.sliceMetadata = function(field, value, cols) {
if(!exists('metadata')) {
data("metadata")
}
if(!length(cols)) {
cols <- 1:nrow(metadata)
}
ix <- which(metadata[cols, field] == value)
return(metadata$distil_id[cols[ix]])
}
tt <- .sliceMetadata("cell_id", "A375", 1:500)
tt
tt <- .sliceMetadata("cell_id", "A375")
tt <- .sliceMetadata("cell_id", "A375", null)
tt <- .sliceMetadata("cell_id", "A375", NULL)
str(tt)
class(1:30)
class(t)
class(tt)
source('/mnt/lincs/CouchLincs/slinky/R/slinky.R')
.sliceMetadata = function(field, value, cols) {
if(!exists('metadata')) {
data("metadata")
}
if(!length(cols)) {
cols <- 1:nrow(metadata)
} else {
if(class(cols) == "character")
cols <- which(colnames(metadata) %in% cols)
}
ix <- which(metadata[cols, field] == value)
return(metadata$distil_id[cols[ix]])
}
library(magrittr)
tt <- .sliceMetadata("cell_id", "A375", NULL) %>% .sliceMetadata("is_gold", "TRUE", .)
str(tt)
tt <- .sliceMetadata("is_gold", "TRUE")
tt <- .sliceMetadata("is_gold", "TRUE", NULL)
str(tt)
.sliceMetadata = function(field, value, cols=NULL) {
if(!exists('metadata')) {
data("metadata")
}
if(!length(cols)) {
cols <- 1:nrow(metadata)
} else {
if(class(cols) == "character")
cols <- which(metadata$distil_id %in% cols)
}
ix <- which(metadata[cols, field] == value)
return(metadata$distil_id[cols[ix]])
}
tt <- .sliceMetadata("cell_id", "A375", NULL) %>% .sliceMetadata("is_gold", "TRUE", .)
str(tt)
source('/mnt/lincs/CouchLincs/slinky/R/slinky.R')
source('/mnt/lincs/CouchLincs/slinky/R/slinky.R')
sliceMetadata = function(field, value, cols=NULL) {
#   "Get a subset if sample ids based on metadata.  Returns vector of \\code{distil_ids}
#   relative expression values, a \\code{type} of document to store the scores
#   \\subsection{Parameters}{
#   \\itemize{
#   \\item{\\code{field} Which field of metadata to search?}
#   \\item{\\code{value} What value to search on?  Uses grep so knock yourself out.}
#   \\item{\\code{cols} Want to subset a subset?  Just provide an initial set of cols to start with.
#                      Default is all columns. }
#   }}
#   \\subsection{Return Value}{distil_id(s) of resulting instances.}"
if(!exists('metadata')) {
data("metadata")
}
if(!length(cols)) {
cols <- 1:nrow(metadata)
} else {
if(class(cols) == "character")
cols <- which(metadata$distil_id %in% cols)
}
ix <- grep(value, metadata[cols, field])
return(metadata$distil_id[cols[ix]])
})
sliceMetadata = function(field, value, cols=NULL) {
#   "Get a subset if sample ids based on metadata.  Returns vector of \\code{distil_ids}
#   relative expression values, a \\code{type} of document to store the scores
#   \\subsection{Parameters}{
#   \\itemize{
#   \\item{\\code{field} Which field of metadata to search?}
#   \\item{\\code{value} What value to search on?  Uses grep so knock yourself out.}
#   \\item{\\code{cols} Want to subset a subset?  Just provide an initial set of cols to start with.
#                      Default is all columns. }
#   }}
#   \\subsection{Return Value}{distil_id(s) of resulting instances.}"
if(!exists('metadata')) {
data("metadata")
}
if(!length(cols)) {
cols <- 1:nrow(metadata)
} else {
if(class(cols) == "character")
cols <- which(metadata$distil_id %in% cols)
}
ix <- grep(value, metadata[cols, field])
return(metadata$distil_id[cols[ix]])
}
tt <- sliceMetadata("is_gold", "TRUE")
str(tt)
tt <- sliceMetadata("is_gold", "RUE")
str(tt)
tt <- sliceMetadata("is_gold", "[TF]RUE")
str(tt)
tt <- sliceMetadata("is_gold", "[TF]RUEP")
str(tt)
tt <- sliceMetadata("cell_id", "A37.*", NULL) %>% sliceMetadata("is_gold", "TRUE", .)
str(tt)
metadata[1,"distil_id"]
metadata[1,c("distil_id", "pert_type")]
metadata[1:3,c("distil_id", "pert_type")]
paste(metadata[1:3,c("distil_id", "pert_type")])
df <- paste(metadata[1:3,c("distil_id", "pert_type")])
df <- metadata[1:3,c("distil_id", "pert_type")]
doCall(df, paste)
do.call(df, paste)
apply(df, 1, paste)
apply(df, 2, paste)
apply(df, 2, paste, collapse='t')
apply(df, 1, paste, collapse='t')
apply(df, 1, paste, collapse='_')
match(c('a', "c", 'd'), c('e', 'f', 'g', 'h', 'a', 'd', 'q', 'c'))
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
getData(1:3)
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
getData(1:3)
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
getData(1:3)
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
getData(1:3)
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
getData(1:3)
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
getData(1:3)
getData(c(1:3))
class(1:3)
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
getData(c(1:3))
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
getData(c(1:3))
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
getData(c(1:3))
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
getData(c(1:3))
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
getData(c(1:3))
cols
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
getData(c(1:3))
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
getData(c(1:3))
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
getData(c(1:3))
getData(c(1:3))
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
getData(c(1:3))
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
getData(c(1:3))
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
getData(c(1:3))
tt <- getData(c(1:3))
apply(tt, unlist)
lapply(tt, unlist)
t3 <- lapply(tt, unlist)
str(t3)
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
t3 <- lapply(tt, unlist)
tt <- getData(c(1:3))
content(tt)
content(tt, as="parsed")
content(tt, as="text")
t3 <- fromJSON(content(tt, as="text"))
t3
str(t3)
do.call(cbind, t3)
doCall(cbind, lapply(t3, function(x) { x$value$data}))
do.Call(cbind, lapply(t3, function(x) { x$value$data}))
do.call(cbind, lapply(t3, function(x) { x$value$data}))
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
tt <- getData(c(1:3))
tt
str(tt)
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
getData(c(1:3))$ids
tt <- getData(c(1:3))
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
tt <- getData(c(1:3))
str(tt)
tt <- getData(c(1:3000))
tt <- getData(c(1:30))
tt <- getData(c(1:10))
str(Tt)
str(tt)
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
str(tt)
tt <- getData(c(1:10))
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
tt <- getData(c(1:10))
str(tt)
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
tt <- getData(c(1:10))
str(tt)
tt <- getData(c(1:5))
tt <- getData(c(1:5))
tt <- getData(c(1:5))
tt <- getData(c(1:5))
tt <- getData(c(1:50))
tt <- getData(c(1:10))
tt <- getData(c(1:20))
str(tt)
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
tt <- getData(c(1:20))
res(tt)
content(tt)
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
content(tt)
tt <- getData(c(1:20))
str(tt)
tt <- getData(c(1:200))
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
tt <- getData(c(1:200))
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
tt <- getData(c(1:200))
source('/mnt/lincs/CouchLincs/slinky/R/test.r')
tt <- getData(c(1:200))
tt <- getData(c(1:200))
tt <- getData(c(1:200))
