library(rjson)
library(GEOquery)
# detach just in case to prevent biobase content overriding httr content
tryCatch({detach('package:httr')}, error = function(e) {})
library(httr)

config <- fromJSON(file="../../config.json")
url <- paste(config$couch_url, ":", config$couch_port, "/query/service", sep="")

init <- function() {
  statement <- "CREATE PRIMARY INDEX ON LINCS1"
  # will fail silently if already exists...
  res <- POST(url, query=list(statement=statement))  
  statement <- "CREATE INDEX ix_perturbagen ON LINCS1(metadata.name)"
  res <- POST(url, query=list(statement=statement))  
}

hold <- function() {
  statement <- "SELECT ARRAY_AGG(DISTINCT metadata.cell_line) FROM LINCS1"
  res <- POST(url, query=list(statement=statement))
  celllines <- unlist(content(res, as='parsed')$results)
  
  statement <- "SELECT metadata.* FROM LINCS1 LIMIT 10"
  res <- POST(url, query=list(statement=statement))
  pert <- unlist(content(res, as='parsed')$results)
  
  statement <- "SELECT ARRAY_AGG(DISTINCT metadata.type) FROM LINCS1"
  res <- POST(url, query=list(statement=statement))
  type <- unlist(content(res, as='parsed')$results)
  
  zs <- function(x) { unlist(x$zscore) }
  id <- function(x) { x$id }
  
  # get gene idss
  statement <- ("SELECT meta(LINCS1).id, data.gene_id FROM LINCS1 WHERE meta(LINCS1).id = 'GSM1715626'")
  gids <- unlist(data$results[[1]]$gene_id)
  
  # get zscores
  statement <- ("SELECT meta(LINCS1).id, data.gene_id, data.zscore FROM LINCS1 WHERE metadata.cell_line = 'A375'")
  res <- POST(url, query=list(statement=statement))
  data <- content(res, as = 'parsed')
  zscores <- sapply(data[[3]], zs)
  colnames(zscores) <- sapply(data[[3]], id) 
  rownames(zscores) <- gids
  ncol(zscores)
  date()
}

load_all <- function () {
  # fetch superseries metadata to identify sub-series
  ss <- GET("http://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE70138&form=text")
  ss <- unlist(strsplit(content(ss, as = 'text'), "\\r*\\n"))
  gse_list <- gsub(".*acc=", "", grep("!Series_summary = GSE.*:", ss, value = TRUE))
  for(gse in gse_list) {
    ids <- GET(paste("http://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=", gse, "&targ=self&view=brief&form=text", sep=""))
    ids <- unlist(strsplit(content(ids, as='text'), "\\r*\\n"))
    ids <- gsub(".* = ", "", grep("!Series_sample_id = GSM", ids, value = TRUE))
    
    
    count <- 1
    for(id in ids) {
      print(paste(gse, count, "of", length(ids), ":", id))
      loadGEO <- tryCatch(
        {
          data <- getGEO(GEO = id, destdir = "/tmp")
          fh <- paste("/tmp/", id, ".soft", sep="")
          unlink(fh)
        },
          error=function(e) e
      )

      if(inherits(loadGEO, "error")) {
        write(paste("ERROR:", gse, "processing failed."), file="errors.log", append=TRUE)
        next
      }
      
      treatment <- gsub(".*:", "", data@header$treatment_protocol_ch1)

      metadata <- list(
        gsm = id,
        cell_line = gsub(".*:", "", data@header$source_name_ch1),
        type = treatment[1],
        lincs_id = treatment[2],
        name = treatment[3],
        dose = treatment[4],
        dose_unit = treatment[5],
        time = treatment[6],
        time_unit = treatment[7]  
      )

      write(paste(id, metadata$name, metadata$lincs_id, metadata$cell_line, sep="\t"), file="loading.log", append=TRUE)

      gene_id <- as.character(data@dataTable@table[1:978,1])
      zscore <- as.numeric(data@dataTable@table[1:978,4])
      statement <- paste("INSERT INTO LINCS1 (KEY, VALUE) VALUES('", id, "', ", toJSON(list(metadata=metadata, data=list(gene_id=gene_id, zscore=zscore))), ")", sep="");
      res <- POST(url, query=list(statement=statement))
      count <- count + 1
    }
  }
}

unique_drugs <- function() {
  statement <- "SELECT DISTINCT metadata.name FROM LINCS1"
  res <- POST(url, query=list(statement=statement))
  unlist(content(res)$results)
}

# compare to  awk -F"\t" '!_[$2]++' loading.log | wc

#statement <- "SELECT DISTINCT METADATA.name FROM LINCS1"
#statement <- "SELECT metadata.* FROM LINCS1 WHERE metadata.name LIKE 'am%'"
#res <- POST(url, query=list(statement=statement))



function (keys, values, rereduce) {
    var unique = function(a) {
        return a.reduce(function(p, c) {
            if (p.indexOf(c) < 0) p.push(c);
            return p;
        }, []);
    };
    if(!rereduce) {
      return unique(values.map(function(a) {
        return a.distil_id;
       }));
    } else {
        var uv = [];
        for (v in values) {
             uv = uv.concat(values[v]);
        }
      return (unique(uv));
    }
}